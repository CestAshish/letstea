import os
import json
from groq import Groq
from userprofiling import user_profiler,chat_bot

# Initialize Groq client
groq_client = Groq(api_key=os.getenv('GROQ_API_KEY'))
user_profile = user_profiler()  # Assuming this function returns a user profile dictionary

# Construct the system prompt
system_prompt = f'''You are Barbara, a friendly language companion for LETSTEA, 
an AI-powered language learning platform. 
User profile: {user_profile}
Your job is to suggest an essay topic based on user profile, 
Start by greeting the user {{"hello again!!, now that we have your profile figured, lets analyze your english"}}
and suggesting one topic based on their profile. 
Then, ask them to write an essay on the suggested topic. 
Finally, analyze the essay and return the CEFR level in the format {{"cefr" : "level[a1-c2]"}}  as your last response,
 without any additional text.
note: this is for you, the command will be generated by system internally
dont ask user to append the command
command = "Evaluate the following essay for CEFR level: {{essay}}" will be given to use as prompt
your response should only be a dictionary  {{"cefr" : "level[a1-c2]"}} and nothing else.'''


def profile_and_proficiency():
    message_history = [{"role": "system", "content": system_prompt}]
    initial_prompt = "init(start)"
    response, message_history = chat_bot(initial_prompt, message_history)

    print('.\n'.join(part.strip() for part in response.split('.')))
    print("Please write your essay (type 'end_essay' to finish):")

    essay_lines = []
    while True:
        line = input()
        if line.strip().lower() == "end_essay":
            if not essay_lines:  # Check if the essay is empty
                print("Your essay is empty. Please write something before submitting.")
                continue
            break
        essay_lines.append(line)

    essay_content = "\n".join(essay_lines)

    evaluation_prompt = f"Evaluate the following essay for CEFR level:\n\n{essay_content}"
    proficiency_evaluation_response, message_history = chat_bot(evaluation_prompt, message_history)

    # Handling the response to check for CEFR
    ce_fr_level_data = {}  # Initialize CEFR level data before using it
    while True:
        proficiency_evaluation_response = proficiency_evaluation_response.strip()
        try:
            if proficiency_evaluation_response.startswith('{'):
                ce_fr_level_data = json.loads(proficiency_evaluation_response)
                break
        except json.JSONDecodeError as e:
            print("Error evaluating the response:", e)
            break

    # Update final_data correctly
    combined_user_data = dict(user_profile)  # Create a copy of user_profile
    combined_user_data.update(ce_fr_level_data)   # Merge ce_fr_level_data into combined_user_data

    # Optionally print combined_user_data to verify
    return combined_user_data


def return_main():
    return  profile_and_proficiency()

